---
title: "Worksheet 8/14: Getting comfortable with GitHub"
subtitle: "MBio 691D"
author: "Lindsay Veazey"
date: "March 13, 2018"
output: word_document
---

```{r setup, include=FALSE}
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
```
## Intro + setting up for next week and beyond

This week I've put together some exercises that build on last week's initial setup and syncing of your laptop, R, and your GitHub account. We'll be walking through some exercises that will increase your familiarity with the facilities GitHub has to offer. Next week, we'll add on even more and run through a basic workflow that you could emulate for your research, and following that, I'll have everyone work in small groups to simulate collaborations using these resources. 

Exciting things to come, so let's get to it.

## Glossary

Here are some terms we'll be using repeatedly for today's exercises- you'll recognize some:

*Blame*: This is an extremely helpful feature that makes Git/GitHub so cool. The blame feature let's you see the last revision in a series of updates that may have led to an error message or other change of interest.

*Branch*: A divergence from the main project (main branch) or main repository. It is contained within the repository but doesn't affect the master branch. It's usually a temporary, minor change to the main branch. The offline term for this is...

*Clone*: This is 1) a copy of a repository that exists on your laptop, or 2) the action of making that copy. You can make changes to a clone without affecting the master branch. It is still connected to the master branch, though, so you can sync changes (useful for collaborations, not for experimenting). For experimenting, you may want to...

*Fork*: This is a personal copy of another user's repository that exists on your account. Forks allow you to change anything in a project without affecting the original. Forks remain attached to the original, allowing you to submit a pull request to the original's author to update with your changes. You can also keep your fork up to date by pulling in updates from the original.

^ These definitions seem very similar- they are, but here is the TL;DR version: A repository branch remains part of the main repo, just like a branch on a tree; you can clone a branch, which is a clone (identical) to the main repo before you change anything. A fork is **independent** of the main repo. We will be forking repos today.

*Commit*: ...aka, a revision to a file/set of files. It's essentially Save 2.0: when you commit a change, Git created a unique identifier that easily records the who, what, and when of the file change. Commits have a commit message you write to succinctly describe any changes.

*Pull*: When you pull a file, you ask Git to fetch and merge the most updated version of that file to your system, which is really helpful when youve been working on different machines or need the latest edits from a collaborator.

*Push*: You make changes to a file locally and save (commit) them, and then push those changes to a remote repository (your GitHub account) so they are stored in the cloud and accessible on other machines.

*Revert*: Undo a commit (your last saved changes) on your branch.

*SSH key*: We generated one via R Studio last week. This is your computer's personal password that identifies it securely to another service.

Go ahead and open GitHub Desktop. You'll see that your current repository is the MBio691D one we set up last week.

Navigate to your GitHub account page and keep that open.

## Snazzing up that page

You currently have one repository (probably) that we set up last week- let's add some more to your page. This will populate your page with interesting, inspiring projects in process by passionate coders who have *way* more energy than the average graduate student. 

- Navigate here: https://github.com/explore 
- Choose 2-3+ pages you'd like to fork to your page. I've chosen the following:
  - https://github.com/fivethirtyeight/data: now you can actually see the models that spectacularly failed accurately predicting the 2016 election outcomes.
  - https://github.com/dmpe/R: Various stats etc. exercises in R
  - https://github.com/bcjaeger/r2glmm: very cool new R package that facilitates the computation of R squared values *with confidence intervals!* for linear and generalized linear mixed models. Before the development of this package, we couldn't easily say how well these models fit our data, but this is a gamechanger). 

The geneticists may want to have a look at https://github.com/umerijaz/microbiomeSeq, where this R package is continually updated by developers in anticipation of an eventual CRAN release.

You can search around- take your time, there's lots of cool stuff on here. And look how many R-centric repos!

INSERT FIG 1

# Following updates 

- You don't have to copy everything to your page; you can watch updates to a project from the audience. 
- Navigate to one of the repositories you found that looks interesting. Sign up to follow updates by choosing to *watch* the project.

INSERT FIG 2

# Forking a repository from GitHub.com

- Navigate to one of the repositories you found that you want to fork for this exercise.
- Upper right corner, select 'Fork'.
- You are automatically redirected to your personal forked copy of your chosen repository. You can make any changes here, examine the guts of the project you just forked (copied) to your account. Great- let's *clone* this newly forked repo to our laptops.

# Cloning a repository from GitHub.com: 2 ways

First way:

- Navigate to your newly forked repository. Select 'Clone or download' and then 'Open in Desktop'.
- So, so clever: GitHub Desktop has already filled in the repository URL and created a local pathway that it thinks makes sense for you and your machine (you can edit the pathway if you like- for example, ensure it isn't placed in your MBio691D repo, if you prefer it in another repo). 
- If all looks good, select 'Clone'. It may take a few moments depending on the size of the repo.
- Now you'll see that your Current repository tab on the right has changed from your MBio repository to your newly cloned repository. Almost there...
- Click 'Fetch origin' to ensure you have the latest updates.
- Now click over to the History tab. You can examine the guts of each component in the clone, which at this point are identical to those in the master branch/main repository.

Second way:

- In GitHub Desktop, File -> Clone Repository
- Select the repository on the GitHub.com tab that you want to clone. If you highlight the 'MBio691D' repository, you'll see a message that tells you that this repository already exists on your machine.

# Deleting a repository

- On your GitHub account page, navigate to the main page of the repository you want to delete.
- Under the repository name, click 'Settings'.
- Scroll down to the Danger Zone heading and select 'Delete'. You'll have to type out the name of the repository to confirm it's deletion- smart feature of GitHub, since deletion = permanent.

## Reverting a commit



```{r eval=FALSE, include=TRUE}
citation('phyloseq')
```
## Review:
- You practiced using more facilities that GitHub offers and increased your comfort and familiarity with the site and your laptop's app (GH Desktop).